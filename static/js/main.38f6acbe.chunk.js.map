{"version":3,"sources":["Form.js","Label.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","name","nric","bed_no","cat_status","admission_date","Date","allergies","handleNameChange","bind","handleNricChange","handleBedNoChange","handleCatStatusChange","handleDateChange","handleAllergiesChange","event","this","setState","target","value","date","Grid","container","spacing","item","xs","md","TextField","id","label","variant","fullWidth","onChange","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","Button","color","onClick","onGenerate","React","Component","dateFns","DateFnsAdapter","Label","person","ctx","canvasRef","current","getContext","p","save","font","translate","rotate","Math","PI","textAlign","fillText","restore","qr","qrcode","addData","make","renderTo2dContext","style","overflow","width","float","position","ref","dpmm","labelWidth","height","labelHeight","App","handleGenerate","handlePrint","createRef","canvas","clearRect","render","img","toDataURL","console","log","a","window","open","document","write","close","print","classes","className","root","CssBaseline","AppBar","Toolbar","Typography","title","startIcon","Container","maxWidth","Paper","paper","withStyles","theme","flexGrow","padding","margin","palette","text","secondary","withTheme","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.38f6acbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {name: '',\r\n                  nric: '',\r\n                  bed_no: '',\r\n                  cat_status: '',\r\n                  admission_date: new Date(),\r\n                  allergies: ''\r\n                };\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleNricChange = this.handleNricChange.bind(this);\r\n    this.handleBedNoChange = this.handleBedNoChange.bind(this);\r\n    this.handleCatStatusChange = this.handleCatStatusChange.bind(this);\r\n    this.handleDateChange = this.handleDateChange.bind(this);\r\n    this.handleAllergiesChange = this.handleAllergiesChange.bind(this);\r\n  }\r\n\r\n  // Change Handlers\r\n\r\n  handleNameChange(event) {\r\n    this.setState({name: event.target.value});\r\n  }\r\n\r\n  handleNricChange(event) {\r\n    this.setState({nric: event.target.value});\r\n  }\r\n\r\n  handleBedNoChange(event) {\r\n    this.setState({bed_no: event.target.value});\r\n  }\r\n\r\n  handleCatStatusChange(event) {\r\n    this.setState({cat_status: event.target.value});\r\n  }\r\n\r\n  handleDateChange(date) {\r\n    this.setState({admission_date: date});\r\n  }\r\n\r\n  handleAllergiesChange(event) {\r\n    this.setState({allergies: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField \r\n                id=\"input-name\" \r\n                label=\"Name\" \r\n                variant=\"standard\" \r\n                fullWidth \r\n                onChange={this.handleNameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <TextField \r\n                id=\"input-nric\" \r\n                label=\"NRIC/FIN\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                onChange={this.handleNricChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n              <TextField \r\n                id=\"input-cat-status\"\r\n                label=\"Cat. Status\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                onChange={this.handleCatStatusChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n              <TextField\r\n                id=\"input-bed-no\"\r\n                label=\"Bed Number\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                onChange={this.handleBedNoChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  fullWidth\r\n                  disableToolbar\r\n                  variant=\"inline\"\r\n                  format=\"dd MMM yyyy\"\r\n                  id=\"date-picker-inline\"\r\n                  label=\"Admission Date\"\r\n                  value={this.state.admission_date}\r\n                  onChange={this.handleDateChange}\r\n                  KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField \r\n                id=\"input-allergies\" \r\n                label=\"Drug Allergies\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                onChange={this.handleAllergiesChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button \r\n                variant=\"contained\"\r\n                color=\"primary\" \r\n                onClick={(event)=>{this.props.onGenerate(this.state)}}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n       \r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport qrcode from 'qrcode-generator';\r\nimport DateFnsAdapter from \"@date-io/date-fns\";\r\n\r\nconst dateFns = new DateFnsAdapter();\r\n\r\nclass Label extends React.Component {\r\n  \r\n  render() {\r\n\r\n    if (this.props.person) {\r\n      const canvas = this.props.canvasRef.current;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const p = this.props.person;\r\n\r\n      // Cat Status\r\n      ctx.save();\r\n      ctx.font = \"60px Arial\";\r\n      ctx.translate(400,0);\r\n      ctx.rotate(-Math.PI/2);\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"CAT \" + p.cat_status, -180, 0);\r\n      ctx.restore();\r\n\r\n      // Field labels\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillText(\"Name:\", 500, 60);\r\n      ctx.fillText(\"NRIC/FIN:\", 500, 120)\r\n      ctx.fillText(\"Bed:\", 500, 180);\r\n      ctx.fillText(\"Admission:\", 500, 240);\r\n      ctx.fillText(\"Drug Allergy:\", 500, 300);\r\n\r\n      // Field data\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillText(p.name, 750, 60);\r\n      ctx.fillText(p.nric, 750, 120)\r\n      ctx.fillText(p.bed_no, 750, 180);\r\n      ctx.fillText(dateFns.format(p.admission_date, \"dd MMM yyyy\"), 750, 240);\r\n      ctx.fillText(p.allergies, 750, 300);\r\n\r\n      // QR Code\r\n      const qr = qrcode(0,'H');\r\n      qr.addData(p.nric);\r\n      qr.make();\r\n      ctx.save();\r\n      ctx.translate(50,50);\r\n      qr.renderTo2dContext(ctx, 10);\r\n      ctx.restore();\r\n    }\r\n\r\n    const divStyle={\r\n      overflow: 'scroll',\r\n      width:'100%',\r\n      float: 'left',\r\n      position:'relative'\r\n    };\r\n\r\n    return (\r\n      <div style={divStyle}>\r\n        <canvas ref={this.props.canvasRef} \r\n                id=\"labelCanvas\"\r\n                width={this.props.dpmm*this.props.labelWidth}\r\n                height={this.props.dpmm*this.props.labelHeight} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Label","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { withStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport PrintIcon from '@material-ui/icons/Print';\n\nimport Form from './Form'\nimport Label from './Label';\n\nconst styles = theme => ({ root: {\n                  flexGrow: 1,\n                },\n                title: {\n                  flexGrow: 1,\n                },\n                container: {\n                  padding: theme.spacing(2),\n                },\n                paper: {\n                  margin: theme.spacing(2),\n                  padding: '20px',\n                  textAlign: 'center',\n                  color: theme.palette.text.secondary,\n                }\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleGenerate = this.handleGenerate.bind(this);\n    this.handlePrint = this.handlePrint.bind(this);\n    this.canvasRef = React.createRef();\n  }\n\n  handleGenerate(person) {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    this.setState({person: person});\n    this.render();\n  }\n\n  handlePrint() {\n    const canvas = this.canvasRef.current;\n    const img = canvas.toDataURL(\"image/png\");\n    console.log(img);\n    var a = window.open('', 'Print', 'height=500, width=500'); \n    a.document.write('<img src=\"'+ img +'\"/>');\n    a.document.close(); \n    a.print(); \n  }\n\n  render()\n  {\n    const {classes} = this.props;\n    \n    return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Label Maker\n          </Typography>\n          <Button color=\"inherit\" startIcon={<PrintIcon />} onClick={this.handlePrint}>Print</Button>\n        </Toolbar>\n      </AppBar>\n      <Container className={classes.container} maxWidth=\"md\">\n        <Paper className={classes.paper}>\n          <Form classes={this.props} onGenerate={this.handleGenerate} />\n        </Paper>\n        <Paper className={classes.paper}>\n          <Grid container spacing={3}>\n          <Grid item xs={12}>\n              <Label canvasRef={this.canvasRef} labelWidth={252} labelHeight={32} dpmm={12} person={this.state.person}/>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Container>\n      \n    </div>\n  );}\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles, {withTheme: true})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}